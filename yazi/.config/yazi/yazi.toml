# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
# "$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

# [manager]
# ratio          = [ 1, 3, 4 ]
# sort_by        = "natural"
# sort_sensitive = false
# sort_reverse   = false
# sort_dir_first = true
# linemode       = "size_and_mtime"
# show_hidden    = true
# show_symlink   = true
# scrolloff      = 99

# [preview]
# tab_size        = 2
# max_width       = 1920
# max_height      = 1080
# cache_dir       = "~/.cache/yazi"
# image_filter    = "triangle"
# image_quality   = 85
# sixel_fraction  = 15
# ueberzug_scale  = 1
# ueberzug_offset = [ 0, 1, 50, 1 ]

# [opener]
# edit = [
# 	{ run = '${EDITOR} "$@"', desc = "Open with Nvim", block = true, for = "unix" },
# ]
# cursor = [
#   { run = 'cursor "$@"', desc = "Open with Cursor", for = "unix" },
# ]
# open = [
# 	{ run = 'open "$@"', desc = "Open", for = "macos" },
# ]
# reveal = [
# 	{ run = 'open -R "$1"', desc = "Reveal", for = "macos" },
# ]
# extract = [
# 	{ run = 'unar "$1"', desc = "Extract here", for = "unix" },
# ]
# play = [
# 	{ run = 'mpv "$@"', orphan = true, for = "unix" },
# 	{ run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
# ]
# markdown = [
#   { run = 'nvim -R "$@"', desc = "Preview with Neovim", for = "unix" },
# ]

# [open]
# rules = [
# 	{ name = "*/", use = [ "edit", "cursor", "open", "reveal" ] },

# 	{ mime = "text/*",  use = [ "edit", "reveal" ] },
# 	{ mime = "image/*", use = [ "open", "reveal" ] },
# 	{ mime = "video/*", use = [ "play", "reveal" ] },
# 	{ mime = "audio/*", use = [ "play", "reveal" ] },
# 	{ mime = "inode/x-empty", use = [ "edit", "reveal" ] },

# 	{ mime = "application/json", use = [ "edit", "cursor", "reveal" ] },
# 	{ mime = "*/javascript",     use = [ "edit", "cursor", "reveal" ] },

# 	{ mime = "application/zip",             use = [ "extract", "reveal" ] },
# 	{ mime = "application/gzip",            use = [ "extract", "reveal" ] },
# 	{ mime = "application/x-tar",           use = [ "extract", "reveal" ] },
# 	{ mime = "application/x-bzip",          use = [ "extract", "reveal" ] },
# 	{ mime = "application/x-bzip2",         use = [ "extract", "reveal" ] },
# 	{ mime = "application/x-7z-compressed", use = [ "extract", "reveal" ] },
# 	{ mime = "application/x-rar",           use = [ "extract", "reveal" ] },
# 	{ mime = "application/xz",              use = [ "extract", "reveal" ] },

# 	{ mime = "*", use = [ "open", "reveal" ] },
# 	{ mime = "text/markdown", use = [ "markdown", "edit", "reveal" ] },
# ]

# [tasks]
# micro_workers    = 5
# macro_workers    = 10
# bizarre_retry    = 5
# image_alloc      = 1073741824  # 1GB
# image_bound      = [ 0, 0 ]
# suppress_preload = true

# [plugin]

# preloaders = [
# 	# Image
# 	{ mime = "image/vnd.djvu", run = "noop" },
# 	{ mime = "image/*",        run = "image" },
# 	# Video
# 	{ mime = "video/*", run = "video" },
# 	# PDF
# 	{ mime = "application/pdf", run = "pdf" },
# ]
# previewers = [
# 	{ name = "*/", run = "folder", sync = true },
# 	# Code
# 	{ mime = "text/*",                 run = "code" },
# 	{ mime = "*/xml",                  run = "code" },
# 	{ mime = "*/javascript",           run = "code" },
# 	{ mime = "*/x-wine-extension-ini", run = "code" },
# 	# JSON
# 	{ mime = "application/json", run = "json" },
# 	# Image
# 	{ mime = "image/vnd.djvu", run = "noop" },
# 	{ mime = "image/*",        run = "image" },
# 	# Video
# 	{ mime = "video/*", run = "video" },
# 	# PDF
# 	{ mime = "application/pdf", run = "pdf" },
# 	# Archive
# 	{ mime = "application/zip",             run = "archive" },
# 	{ mime = "application/gzip",            run = "archive" },
# 	{ mime = "application/x-tar",           run = "archive" },
# 	{ mime = "application/x-bzip",          run = "archive" },
# 	{ mime = "application/x-bzip2",         run = "archive" },
# 	{ mime = "application/x-7z-compressed", run = "archive" },
# 	{ mime = "application/x-rar",           run = "archive" },
# 	{ mime = "application/xz",              run = "archive" },
# 	# Fallback
# 	{ name = "*", run = "file" },
# ]

# prepend_previewers = [
#   # Add markdown previewer with syntax highlighting
#   { name = "*.md", run = "code" },
#   { mime = "text/markdown", run = "code" },
# ]

# [input]
# # cd
# cd_title  = "Change directory:"
# cd_origin = "top-center"
# cd_offset = [ 0, 2, 50, 3 ]

# # create
# create_title  = "Create:"
# create_origin = "top-center"
# create_offset = [ 0, 2, 50, 3 ]

# # rename
# rename_title  = "Rename:"
# rename_origin = "hovered"
# rename_offset = [ 0, 1, 50, 3 ]

# # trash
# trash_title 	= "Move {n} selected file{s} to trash? (y/N)"
# trash_origin	= "top-center"
# trash_offset	= [ 0, 2, 50, 3 ]

# # delete
# delete_title 	= "Delete {n} selected file{s} permanently? (y/N)"
# delete_origin	= "top-center"
# delete_offset	= [ 0, 2, 50, 3 ]

# # filter
# filter_title  = "Filter:"
# filter_origin = "top-center"
# filter_offset = [ 0, 2, 50, 3 ]

# # find
# find_title  = [ "Find next:", "Find previous:" ]
# find_origin = "top-center"
# find_offset = [ 0, 2, 50, 3 ]

# # search
# search_title  = "Search via {n}:"
# search_origin = "top-center"
# search_offset = [ 0, 2, 50, 3 ]

# # shell
# shell_title  = [ "Shell:", "Shell (block):" ]
# shell_origin = "top-center"
# shell_offset = [ 0, 2, 50, 3 ]

# # overwrite
# overwrite_title  = "Overwrite an existing file? (y/N)"
# overwrite_origin = "top-center"
# overwrite_offset = [ 0, 2, 50, 3 ]

# # quit
# quit_title  = "{n} task{s} running, sure to quit? (y/N)"
# quit_origin = "top-center"
# quit_offset = [ 0, 2, 50, 3 ]

# [select]
# open_title  = "Open with:"
# open_origin = "hovered"
# open_offset = [ 0, 1, 50, 7 ]

# [which]
# sort_by        = "none"
# sort_sensitive = false
# sort_reverse   = false

# [log]
# enabled = false

# [headsup]
# # enabled = true